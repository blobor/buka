worker_processes 1;

events {
  worker_connections 1024;
}

http {

  sendfile on;
  access_log off;

  # SECURITY SECTION

  # don't send the nginx version number in error pages and Server header
  server_tokens off;

  # config to don't allow the browser to render the page inside an frame or iframe
  # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
  # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
  # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
  add_header X-Frame-Options SAMEORIGIN;

  # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
  # to disable content-type sniffing on some browsers.
  # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
  # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
  # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
  # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
  add_header X-Content-Type-Options nosniff;

  # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
  # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
  # this particular website if it was disabled by the user.
  # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
  add_header X-XSS-Protection "1; mode=block";

  ## ToDo: add Content-Security-Policy

  # END SECURITY SECTION

  include /etc/nginx/mime.types;

  gzip              on;
  gzip_http_version 1.0;
  gzip_proxied      any;
  gzip_min_length   500;
  gzip_disable      "MSIE [1-6]\.";
  gzip_types        text/plain text/xml text/css
                    text/comma-separated-values
                    text/javascript application/javascript application/x-javascript
                    application/atom+xml application/json;

  # List of application servers
  upstream app_servers {
    server web:3000;
  }

  # Configuration for the server
  server {
    # Running port
    listen 80 default_server;
    listen [::]:80 default_server;

    server_name skipass.site www.skipass.site;

    return 301 https://$server_name$request_uri;
  }

  # Configuration for the server
  server {

    # SSL configuration
    listen 443 ssl http2 default_server deferred;
    listen [::]:443 ssl http2 default_server deferred;

    server_name skipass.site www.skipass.site;

    ssl_certificate /etc/letsencrypt/live/skipass.site/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/skipass.site/privkey.pem;

    # Diffie-Hellman parameter for DHE ciphersuites
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # disable SSLv3(enabled by default since nginx 0.8.19)
    # since it's less secure then TLS http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    # enables server-side protection from BEAST attacks
    ssl_prefer_server_ciphers on;

    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_ecdh_curve secp384r1;

    # enable session resumption to improve https performance
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 5m;

    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    # enable ocsp stapling (mechanism by which a site can convey certificate revocation
    # information to visitors in a privacy-preserving, scalable manner)
    # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    ssl_trusted_certificate /etc/letsencrypt/live/skipass.site/chain.pem;

    # config to enable HSTS(HTTP Strict Transport Security)
    # https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

    # Here we define the web-root for our SSL proof
    location /.well-known {
      root /usr/share/nginx/html;
    }

    # Proxying the connections connections
    location / {
      proxy_pass         http://app_servers;
      proxy_redirect     off;
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host $server_name;

      proxy_hide_header X-Powered-By;
    }
  }
}
